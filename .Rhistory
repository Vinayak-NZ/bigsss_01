var = "I(SCON_scaled^2)",
at = list(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 3),
stress = most_common_stress,
age_cat = most_common_age,
sex = most_common_sex
))
# Display results
print(em_quad_slopes)
pairs(em_quad_slopes)
# create data frame of predictions (control for age, sex, stress)
most_common_stress <-
names(sort(table(data_imputed_long$stress), decreasing = TRUE))[1]
most_common_age <-
names(sort(table(data_imputed_long$age_cat), decreasing = TRUE))[1]
most_common_sex <-
names(sort(table(data_imputed_long$sex), decreasing = TRUE))[1]
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 3),
stress = most_common_stress,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <-
posterior_epred(model_brm_02,
newdata = predictor_grid,
re_formula = NA)
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary$SCON_group <-
as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")))
emmeans_summary$SCON_group <-
factor(emmeans_summary$SCON_group,
levels = c("Low", "Moderate", "High"))
emmeans_summary$group <-
as.factor(ifelse(emmeans_summary$group == 0, "Control", "Intervention"))
emmeans_summary <-
emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
# plot conditional effects
ggplot(emmeans_summary, aes(x = time, y = predicted_mean, color = factor(group))) +
geom_point(position = position_dodge(0.5), size = 3) +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +
facet_wrap(~ SCON_group) +
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Time",
y = "Predicted Work-Family Interference (WFI)",
color = "Group") +
scale_color_manual(values = c("red", "blue"), labels = c("Control", "Intervention")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
min(data_imputed_long$SCON_scaled)
max(data_imputed_long$SCON_scaled)
# create data frame of predictions (control for age, sex, stress)
most_common_stress <-
names(sort(table(data_imputed_long$stress), decreasing = TRUE))[1]
most_common_age <-
names(sort(table(data_imputed_long$age_cat), decreasing = TRUE))[1]
most_common_sex <-
names(sort(table(data_imputed_long$sex), decreasing = TRUE))[1]
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 3),
stress = most_common_stress,
age_cat = most_common_age,
sex = most_common_sex
)
View(predictor_grid)
posterior_predictions <-
posterior_epred(model_brm_02,
newdata = predictor_grid,
re_formula = NA)
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
scale_SCON <- seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 3)
scale_SCON[1]
emmeans_summary$SCON_group <-
as.factor(ifelse(emmeans_summary$SCON_scaled == scale_SCON[1], "Low",
ifelse(emmeans_summary$SCON_scaled == scale_SCON[2],
"Moderate", "High")))
emmeans_summary$SCON_group <-
factor(emmeans_summary$SCON_group,
levels = c("Low", "Moderate", "High"))
emmeans_summary$group <-
as.factor(ifelse(emmeans_summary$group == 0, "Control", "Intervention"))
emmeans_summary <-
emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
# plot conditional effects
ggplot(emmeans_summary, aes(x = time, y = predicted_mean, color = factor(group))) +
geom_point(position = position_dodge(0.5), size = 3) +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +
facet_wrap(~ SCON_group) +
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Time",
y = "Predicted Work-Family Interference (WFI)",
color = "Group") +
scale_color_manual(values = c("red", "blue"), labels = c("Control", "Intervention")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
group_labels <- c("Control", "Intervention")
names(group_labels) <- c(0, 1)
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI, color = factor(time))) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals, labels = c("Baeline", "Follow-up")) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE, size = 3) +
facet_wrap(~ group, labeller = labeller(group = group_labels)) +
labs(
title = "Non-Linear Relationship Between Self-Control and WFI",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)",
color = "Time"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
data_imputed_pooled_all$SCON_cat <- factor(ifelse(data_imputed_pooled_all$SCON %in% c(1, 2, 3, 4),
"Low",
iflese(data_imputed_pooled_all$SCON %in% c(5, 6, 7, 8),
"Moderate", "High")),
order = TRUE,
levels = c("Low", "Moderate", "High"))
data_imputed_pooled_all$SCON_cat <- factor(ifelse(data_imputed_pooled_all$SCON %in% c(1, 2, 3, 4),
"Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5, 6, 7, 8),
"Moderate", "High")),
order = TRUE,
levels = c("Low", "Moderate", "High"))
wfi_model_cat <- brm(WFI ~ group*time*SCON_cat + stress + age_cat + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_pooled_all,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
summary(wfi_model_cat)
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 3),
stress = 5,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <-
posterior_epred(model_brm_02,
newdata = predictor_grid,
re_formula = NA)
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary$SCON_group <-
as.factor(ifelse(emmeans_summary$SCON_scaled == scale_SCON[1], "Low",
ifelse(emmeans_summary$SCON_scaled == scale_SCON[2],
"Moderate", "High")))
emmeans_summary$SCON_group <-
factor(emmeans_summary$SCON_group,
levels = c("Low", "Moderate", "High"))
emmeans_summary$group <-
as.factor(ifelse(emmeans_summary$group == 0, "Control", "Intervention"))
emmeans_summary <-
emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
# plot conditional effects
ggplot(emmeans_summary, aes(x = time, y = predicted_mean, color = factor(group))) +
geom_point(position = position_dodge(0.5), size = 3) +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +
facet_wrap(~ SCON_group) +
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Time",
y = "Predicted Work-Family Interference (WFI)",
color = "Group") +
scale_color_manual(values = c("red", "blue"), labels = c("Control", "Intervention")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 3),
stress = 1,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <-
posterior_epred(model_brm_02,
newdata = predictor_grid,
re_formula = NA)
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary$SCON_group <-
as.factor(ifelse(emmeans_summary$SCON_scaled == scale_SCON[1], "Low",
ifelse(emmeans_summary$SCON_scaled == scale_SCON[2],
"Moderate", "High")))
emmeans_summary$SCON_group <-
factor(emmeans_summary$SCON_group,
levels = c("Low", "Moderate", "High"))
emmeans_summary$group <-
as.factor(ifelse(emmeans_summary$group == 0, "Control", "Intervention"))
emmeans_summary <-
emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
# plot conditional effects
ggplot(emmeans_summary, aes(x = time, y = predicted_mean, color = factor(group))) +
geom_point(position = position_dodge(0.5), size = 3) +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +
facet_wrap(~ SCON_group) +
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Time",
y = "Predicted Work-Family Interference (WFI)",
color = "Group") +
scale_color_manual(values = c("red", "blue"), labels = c("Control", "Intervention")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
View(predictor_grid)
source("R/00_load_packages.R")
source("R/00_set_date.R")
source("R/00_load_models.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
source("R/04_data_edit_outliers.R")
View(data_input)
data_sub <- data_input_merged[, c("id", "v_354", "HiEdu_DE", "v_531", "v_286", "v_285")]
data_sub <- data_input_merged[, c("id", "v_354", "HiEdu_DE", "v_531", "v_286", "v_287")]
data_new <- merge(data_imputed_pooled_all, data_sub, by = "id")
wfi_model_new <- brm(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + v_354 + HiEdu_DE + v_531 + v_286 + v_287 (1 | id),
family = Gamma(link = "log"),
data = data_new,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
wfi_model_new <- brm(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + v_354 + HiEdu_DE + v_531 + v_286 + v_287 + (1 | id),
family = Gamma(link = "log"),
data = data_new,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
summary(wfi_model_new)
plot(data_new$WFI, data_new$v_286)
plot(data_input_merged$WFI_T1, data_input_merged$v_286)
plot(data_input_merged$WFI_T1, data_input_merged$v_287)
data_sub <- data_input_merged[, c("id", "v_354", "HiEdu_DE", "v_531", "v_286", "v_287")]
data_sub$v_354 <- factor(data_sub$v_354,
ordered = TRUE,
levels = c(1, 2, 3, 4, 5, 6))
data_new <- merge(data_imputed_pooled_all, data_sub, by = "id")
wfi_model_new <- brm(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + v_354 + HiEdu_DE + v_531 + v_286 + v_287 + (1 | id),
family = Gamma(link = "log"),
data = data_new,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
summary(wfi_model_new)
data_new$v_286_cat <- factor(ifelse(data_new$v_286 %in% c(1, 2), "Low",
ifelse(data_new$v_286 == 3, "Moderate", "High")),
ordered = TRUE, levels = c("Low", "Moderate", "High"))
table(data_new$v_286_cat)
wfi_model_new_02 <- brm(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + v_286_cat + (1 | id),
family = Gamma(link = "log"),
data = data_new,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
summary(wfi_model_new_02)
data_imputed_long <- do.call(rbind, data_imputed_output)
View(data_imputed_long)
original_data <- data_input
original_data <- original_data[, c("id",
"Group",
"Age",
"v_236",
"v_534",
"SCON_T1",
"SCON_T2",
"WFI_T1",
"WFI_T2")]
setDT(original_data)
original_data <- melt(original_data,
id.vars = c("id",
"Group",
"Age",
"v_236",
"v_534"),
measure.vars = list(c("SCON_T1", "SCON_T2"), c("WFI_T1", "WFI_T2")),
variable.name = "time",
value.name = c("SCON", "WFI"))
original_data[, "time"] <- ifelse(original_data[, "time"] == 1,
"baseline", "follow-up")
original_data$group <- as.factor(original_data$Group)
original_data$time <- as.factor(original_data$time)
original_data$sex <- as.factor(original_data$v_236)
original_data[["SCON"]] <-
abs(as.numeric(original_data[["SCON"]]))
original_data[["WFI"]] <-
abs(as.numeric(original_data[["WFI"]]))
original_data[["age_cat"]] <-
ifelse(original_data[["Age"]] < 31, 1,
ifelse(original_data[["Age"]] >= 31 &
original_data[["Age"]] < 41, 2,
ifelse(original_data[["Age"]] >= 41 &
original_data[["Age"]] < 51, 3, 4)))
original_data$age_cat <- factor(original_data[["age_cat"]],
order = TRUE,
levels = c(1, 2, 3, 4))
original_data[["stress"]] <- factor(original_data[["v_534"]],
order = TRUE,
levels = c(1, 2, 3, 4, 5))
original_data <- as.data.frame(original_data)
original_data$.id <- original_data$id
original_data$.imp <- 0
original_data <- original_data[, c(".imp",
".id",
"id",
"group",
"sex",
"age_cat",
"time",
"stress",
"SCON",
"WFI")]
original_data$SCON_scaled <- scale(original_data$SCON)[,1]
scon_model_comp <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
family = gaussian(link = "log"),
data = original_data,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
summary(scon_model_comp)
wfi_model_comp <- brm(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
family = Gamma(link = "log"),
data = original_data,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10),
save_pars = save_pars(all = TRUE))
summary(wfi_model_comp)
summary(model_brm_01)
# S3 method for class 'brmsfit'
report(model_brm_01)
install.packages("report")
# S3 method for class 'brmsfit'
report(model_brm_01)
library(report)
# S3 method for class 'brmsfit'
report(model_brm_01)
class(model_brm_01)
posterior_summary(model_brm_02, probs = c(0.025, 0.5, 0.975))
?summary
posterior_summary(wfi_model_new_02, probs = c(0.025, 0.5, 0.975))
?posterior_summary.brmsfit
?posterior_summary
model_output <-
posterior_summary(model_brm_02,
probs = c(0.025, 0.975),
robust = TRUE)
model_output
model_output <-
posterior_summary(model_brm_02,
probs = c(0.025, 0.975),
robust = TRUE,
variable = c("Intercept", "group1", "timefollowMup",
"SCON_scaled", "I(SCON_scaled^2)",
"group1:timefollowMup",
"group1:SCON_scaled",
"group1:I(SCON_scaled^2)",
"timefollowMup:SCON_scaled",
"timefollowMup:I(SCON_scaled^2)",
"group1:timefollowMup:SCON_scaled",
"group1:timefollowMup:I(SCON_scaled^2)"))
model_output <-
posterior_summary(model_brm_02,
probs = c(0.025, 0.975),
robust = TRUE)
library(bayestestR)
# Compute probability of direction for all parameters
pd_values <- p_direction(model_brm_02)
# View results
print(pd_values)
rope_values <- p_rope(model_brm_02)
print(rope_values)
bayes_R2(model_brm_02)
summary(model_brm_02)
bayes_R2(model_brm_02, summary = TRUE, ndraws = 1000)
?bayes_R2
model_output <-
posterior_summary(model_brm_01,
probs = c(0.025, 0.975),
robust = TRUE)
# Compute probability of direction for all parameters
pd_values <- p_direction(model_brm_01)
model_output
# Compute probability of direction for all parameters
pd_values <- p_direction(model_brm_01)
# View results
print(pd_values)
rope_values <- p_rope(model_brm_01)
print(rope_values)
bayes_R2(model_brm_01, summary = TRUE, ndraws = 1000)
summary(model_brm_02)
model_output <-
posterior_summary(model_brm_01,
probs = c(0.025, 0.975),
robust = TRUE,
variable = "sex2")
model_output <-
posterior_summary(model_brm_01,
probs = c(0.025, 0.975),
robust = TRUE,
variable = "sex")
model_output <-
posterior_summary(model_brm_01,
probs = c(0.025, 0.975),
robust = TRUE,
variable = "b_sex2")
summary(model_brm_02)
model_output <-
posterior_summary(model_brm_01,
probs = c(0.025, 0.975),
robust = TRUE)
model_output
model_output <-
posterior_summary(model_brm_01,
probs = c(0.025, 0.975),
robust = TRUE,
variable = c("b_Intercept", "b_group1", "b_timefollowMup", "b_stress.L", "b_stress.Q",
"b_stress.C", "b_stressE4", "b_age_cat.L", "b_age_cat.Q", "b_age_cat.C",
"b_sex2", "b_group1:timefollowMup", "sd_id__Intercept", "sigma"))
model_output
# model-estimates
model_output <-
posterior_summary(model_brm_02,
probs = c(0.025, 0.975),
robust = TRUE)
model_output
# model-estimates
model_output <-
posterior_summary(model_brm_02,
probs = c(0.025, 0.975),
robust = TRUE,
variable = c("b_Intercept", "b_group1", "b_timefollowMup", "b_ISCON_scaledE2", "b_SCON_scaled",
"b_stress.L", "b_stress.Q", "b_stress.C", "b_stressE4", "b_age_cat.L",
"b_age_cat.Q", "b_age_cat.C", "b_sex2", "b_group1:timefollowMup",
"b_group1:ISCON_scaledE2", "b_timefollowMup:ISCON_scaledE2",
"b_group1:SCON_scaled", "b_timefollowMup:SCON_scaled",
"b_group1:timefollowMup:ISCON_scaledE2", "b_group1:timefollowMup:SCON_scaled",
"sd_id__Intercept", "shape"))
model_output
