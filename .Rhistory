"Age",
"v_236",
"v_534",
"SCON_T1",
"SCON_T2_imp",
"WFI_T1",
"WFI_T2_imp")]
setDT(data_imputed_pooled_all)
data_imputed_pooled_all <- melt(data_imputed_pooled_all,
id.vars = c("id",
"Group",
"Age",
"v_236",
"v_534"),
measure.vars = list(c("SCON_T1", "SCON_T2_imp"), c("WFI_T1", "WFI_T2_imp")),
variable.name = "time",
value.name = c("SCON", "WFI"))
data_imputed_pooled_all[, "time"] <- ifelse(data_imputed_pooled_all[, "time"] == 1,
"baseline", "follow-up")
data_imputed_pooled_all$time <- as.factor(data_imputed_pooled_all$time)
data_imputed_pooled_all$sex <- as.factor(data_imputed_output[[i]]$v_236)
data_imputed_pooled_all[["stress"]] <- abs(as.numeric(data_imputed_pooled_all[["v_534"]]))
data_imputed_pooled_all[["SCON"]] <- abs(as.numeric(data_imputed_pooled_all[["SCON"]]))
data_imputed_pooled_all[["WFI"]] <- abs(as.numeric(data_imputed_pooled_all[["WFI"]]))
data_imputed_pooled_all <- as.data.frame(data_imputed_pooled_all)
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
theme_minimal() +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)")
ggplot(data_input, aes(x = SCON_T1, y = WFI_T1)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
theme_minimal() +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)")
ggplot(data_input, aes(x = SCON_T2, y = WFI_T2)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
theme_minimal() +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)")
install.packages("mgcv")
library(mgcv)
model_gam <- gam(WFI ~ Group*time + s(SCON)*time + stress + Age + sex + s(id, bs = "re"),
data = data_imputed_pooled_all, method = "REML")
model_gam <- gam(WFI ~ Group*time + s(SCON, by = time) + stress + Age + sex + s(id, bs = "re"),
data = data_imputed_pooled_all, method = "REML")
summary(model_gam)
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red") +
theme_minimal() +
labs(title = "Quadratic Relationship Between Self-Control and WFI",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)")
source("R/00_load_packages.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
model_brm_quad_interaction <- brm(WFI ~ Group * time + SCON + I(SCON^2) +
time:SCON + time:I(SCON^2) +
stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 4,
iter = 4000)
library(brms)
model_brm_quad_interaction <- brm(WFI ~ Group * time + SCON + I(SCON^2) +
time:SCON + time:I(SCON^2) +
stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 4,
iter = 4000)
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_quad_interaction <- brm(WFI ~ Group * time + SCON + I(SCON^2) +
time:SCON + time:I(SCON^2) +
stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 4,
iter = 4000)
model_brm_quad_test <- brm(WFI ~ I(SCON^2),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000)
model_brm_quad_test <- brm(WFI ~ I(SCON^2),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000)
source("R/00_load_packages.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_quad_test <- brm(WFI ~ I(SCON^2),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000)
library(brms)
model_brm_quad_test <- brm(WFI ~ I(SCON^2),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000)
summary(model_brm_quad_test)
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm <- brm(WFI ~ Group*time + SCON*time + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,  # Use your dataset
chains = 4,
iter = 4000,
warmup = 500,
control = list(adapt_delta = 0.8))
model_brm <- brm(WFI ~ Group*time + SCON*time + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,  # Use your dataset
chains = 2,
iter = 1000,
warmup = 500,
control = list(adapt_delta = 0.8))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
theme_minimal() +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
source("R/00_load_packages.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
theme_minimal() +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
data_imputed_pooled_all <- cbind(data_input[, exclude_vars], data_imputed_pooled)
data_imputed_pooled_all <- data_imputed_pooled_all[, c("id",
"Group",
"Age",
"v_236",
"v_534",
"SCON_T1",
"SCON_T2_imp",
"WFI_T1",
"WFI_T2_imp")]
setDT(data_imputed_pooled_all)
data_imputed_pooled_all <- melt(data_imputed_pooled_all,
id.vars = c("id",
"Group",
"Age",
"v_236",
"v_534"),
measure.vars = list(c("SCON_T1", "SCON_T2_imp"), c("WFI_T1", "WFI_T2_imp")),
variable.name = "time",
value.name = c("SCON", "WFI"))
data_imputed_pooled_all[, "time"] <- ifelse(data_imputed_pooled_all[, "time"] == 1,
"baseline", "follow-up")
data_imputed_pooled_all$time <- as.factor(data_imputed_pooled_all$time)
data_imputed_pooled_all$sex <- as.factor(data_imputed_output[[i]]$v_236)
data_imputed_pooled_all[["stress"]] <- abs(as.numeric(data_imputed_pooled_all[["v_534"]]))
data_imputed_pooled_all[["SCON"]] <- abs(as.numeric(data_imputed_pooled_all[["SCON"]]))
data_imputed_pooled_all[["WFI"]] <- abs(as.numeric(data_imputed_pooled_all[["WFI"]]))
data_imputed_pooled_all <- as.data.frame(data_imputed_pooled_all)
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
theme_minimal() +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
source("R/00_load_packages.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
warnings()
data_imputed$loggedEvents
View(data_imputed)
colnames(data_imputed$imp[[1]])
colnames(data_imputed_pooled)
rownames(data_imputed_pooled_all)[1:10]
rownames(data_imputed_pooled)[1:10]
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
source("R/05_build_mixed_effects_models.R")
source("R/05_build_gam_models.R")
summary(model_gam_01)
gam.check(model_gam_01)
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI, color = factor(time))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
hist(data_input$SCON_T1)
hist(data_input$SCON_T2)
hist(data_input$WFI_T1)
hist(data_input$WFI_T2)
hist(data_input$WFI_T1)
hist(data_input$SCON_T2)
model_gam_01 <- gam(WFI ~ Group*time +
s(SCON, by = time) +
stress +
Age +
sex +
s(id, bs = "re"),
family = Gamma(link = "log"),
data = data_imputed_pooled_all,
method = "REML")
summary(model_gam_01)
model_gam_02 <- gam(SCON ~ Group*time +
stress +
Age +
sex +
s(id, bs = "re"),
family = gaussian(link = "log"),
data = data_imputed_pooled_all,
method = "REML")
summary(model_gam_02)
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(WFI ~ Group*time + SCON*time + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 4,
iter = 4000,
warmup = 500,
control = list(adapt_delta = 0.8))
source("R/00_load_packages.R")
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(WFI ~ Group*time + SCON*time + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 4,
iter = 2000,
warmup = 500)
source("R/00_load_packages.R")
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(WFI ~ Group*time + SCON*time + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000,
warmup = 500)
source("R/00_load_packages.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(WFI ~ Group*time + SCON*time + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000,
warmup = 500,
control = list(adapt_delta = 0.8))
model_brm_01
saveRDS(model_brm_01, file = "output/model_brm_01.rds")
model_brm_02 <- brm(SCON ~ Group*time + stress + Age + sex + (1 | id),
family = gaussian(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000,
warmup = 500,
control = list(adapt_delta = 0.8))
model_brm_02
saveRDS(model_brm_02, file = "output/model_brm_02.rds")
model_brm_01_adj <- brm(WFI ~ Group*time + SCON + stress + Age + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 2,
iter = 1000,
warmup = 500,
control = list(adapt_delta = 0.8))
View(data_input)
model_brm_01_adj
model_brms_01
model_brm_01
model_brm_01_adj
model_brm_02
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +  # Scatterplot
geom_smooth(method = "loess", color = "blue", se = TRUE) +  # LOESS smoother
geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # Linear model
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
install.packages("mediation")
library(mediate)
library(mediation)
# Path a: Does the intervention increase self-control?
model_a <- lmer(SCON ~ Group*time + (1 | id), data = data_imputed_pooled_all)
# Path b: Does self-control affect WtFI?
model_b <- lmer(WFI ~ SCON*time + Group*time + (1 | id), data = data_imputed_pooled_all)
# Multilevel mediation model
med_model <- mediate(model_a, model_b, treat = "Group", mediator = "SCON",
boot = TRUE, sims = 5000)
# Multilevel mediation model
med_model <- mediate(model_a, model_b, treat = "Group", mediator = "SCON",
boot = FALSE, sims = 5000)
# Summary of mediation results
summary(med_model)
cor(data_imputed_pooled_all$WFI, data_imputed_pooled_all$SCON)
View(data_imputed_pooled)
install.packages("lavaan")
library(lavaan)
model_multigroup <- '
WFI_T2_imp ~ WFI_T1 + SCON_T1 + v_534 + SCON_T2_imp
SCON_T1 ~~ v_534
SCON_T1 ~~ WFI_T1
v_534 ~~ WFI_T1
'
# Fit model with group comparison
fit_multi <- sem(model_multigroup,
data = data_imputed_pooled_all,
group = "Group",
estimator = "MLM")
# Fit model with group comparison
fit_multi <- sem(model_multigroup,
data = data_imputed_pooled,
group = "Group",
estimator = "MLM")
data_imputed_pooled <- cbind(data_input[, exclude_vars], data_imputed_pooled)
# Fit model with group comparison
fit_multi <- sem(model_multigroup,
data = data_imputed_pooled,
group = "Group",
estimator = "MLM")
plot(data_input$v_534)
data_imputed_pooled$v_534 <- as.factor(data_imputed_pooled$v_534, order = TRUE, levels = c(1, 2, 3, 4, 5))
data_imputed_pooled$v_534 <- factor(data_imputed_pooled$v_534,
order = TRUE,
levels = c(1, 2, 3, 4, 5))
plot(data_imputed_pooled$v_534)
# Fit model with group comparison
fit_multi <- sem(model_multigroup,
data = data_imputed_pooled,
group = "Group",
estimator = "MLM")
# Fit model with group comparison
fit_multi <- sem(model_multigroup,
data = data_imputed_pooled,
group = "Group",
estimator = "WLSMV")
# Summary of mediation results
summary(med_model)
model_multigroup <- '
# Structural paths
WFI_T2_imp ~ WFI_T1 + SCON_T1 + v_534 + SCON_T2_imp
# Covariances among predictors
SCON_T1 ~~ v_534
SCON_T1 ~~ WFI_T1
v_534 ~~ WFI_T1
# Explicit variances (helps with estimation issues)
WFI_T1 ~~ WFI_T1
SCON_T1 ~~ SCON_T1
v_534 ~~ v_534
SCON_T2_imp ~~ SCON_T2_imp
'
data_imputed_pooled$v_534 <- factor(data_imputed_pooled$v_534,
order = TRUE,
levels = c(1, 2, 3, 4, 5))
# Fit model with group comparison
fit_multi <- sem(model_multigroup,
data = data_imputed_pooled,
group = "Group",
estimator = "WLSMV")
# Show group comparison results
summary(fit_multi, fit.measures = TRUE, standardized = TRUE, ci = TRUE)
fit <- sem(model_multigroup, data = data_imputed_pooled, representation = "RAM")
hist(data_input$SCON_T1)
min(data_input$SCON_T1)
max(data_input$SCON_T1)
source("R/00_load_packages.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
data_imputed_pooled_all <- cbind(data_input[, exclude_vars], data_imputed_pooled)
data_imputed_pooled_all <- data_imputed_pooled_all[, c("id",
"Group",
"Age",
"v_236",
"v_534",
"SCON_T1",
"SCON_T2_imp",
"WFI_T1",
"WFI_T2_imp")]
setDT(data_imputed_pooled_all)
data_imputed_pooled_all <- melt(data_imputed_pooled_all,
id.vars = c("id",
"Group",
"Age",
"v_236",
"v_534"),
measure.vars = list(c("SCON_T1", "SCON_T2_imp"), c("WFI_T1", "WFI_T2_imp")),
variable.name = "time",
value.name = c("SCON", "WFI"))
data_imputed_pooled_all[, "time"] <- ifelse(data_imputed_pooled_all[, "time"] == 1,
"baseline", "follow-up")
data_imputed_pooled_all$time <- as.factor(data_imputed_pooled_all$time)
data_imputed_pooled_all$sex <- as.factor(data_imputed_output[[i]]$v_236)
data_imputed_pooled_all[["stress"]] <- abs(as.numeric(data_imputed_pooled_all[["v_534"]]))
data_imputed_pooled_all[["SCON"]] <- abs(as.numeric(data_imputed_pooled_all[["SCON"]]))
data_imputed_pooled_all[["WFI"]] <- abs(as.numeric(data_imputed_pooled_all[["WFI"]]))
data_imputed_pooled_all <- as.data.frame(data_imputed_pooled_all)
test_model_01 <- lme4::lmer(WFI ~ Group*time*SCON + stress + Age + sex + (1 | id),
data = data_imputed_pooled_all,
REML=FALSE)
test_model_01
summary(test_model_01)
data_imputed_pooled_all$SCON_Cat <- cut(data_imputed_pooled_all$SCON,
breaks = c(1, 4, 7, 11),
labels = c("Low", "Medium", "High"),
include.lowest = TRUE)
test_model_01_cat <- lme4::lmer(WFI ~ Group*time*SCON_cat + stress + Age + sex + (1 | id),
data = data_imputed_pooled_all,
REML=FALSE)
test_model_01_cat <- lme4::lmer(WFI ~ Group*time*SCON_Cat + stress + Age + sex + (1 | id),
data = data_imputed_pooled_all,
REML=FALSE)
test_model_01_cat
summary(test_model_01_cat)
summary(test_model_01_cat)
test_model_01 <- lme4::lmer(WFI ~ Group*time*SCON + stress + Age + sex + (1 | id),
data = data_imputed_pooled_all,
REML=FALSE)
summary(test_model_01)
model_poly <- lmer(WFI ~ SCON + I(SCON^2) + Group * time + stress + Age + sex + (1 | id),
data = data_imputed_pooled_all)
summary(model_poly)
model_poly_interaction <- lmer(WFI ~ SCON + I(SCON^2) +
Group * time * SCON +
Group * time * I(SCON^2) +
stress + Age + sex + (1 | id),
data = data_imputed_pooled_all)
summary(model_poly_interaction)
AIC(test_model_01, model_quadratic)
AIC(test_model_01, model_poly_interaction)
anova(test_model_01, model_poly_interaction)
install.packages("lmerTest")
library(lmerTest)
summary(model_poly_interaction)
