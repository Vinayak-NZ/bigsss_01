data = data_imputed_pooled_all,
control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
# Compare models using ANOVA
anova(model_linear, model_non_linear)
# summary of non-linear-model
summary(model_non_linear)
# create single imputed dataset
data_imputed_pooled <- merge_imputations(data_impute_input,
data_imputed,
ori = data_impute_input)
data_imputed_pooled <- cbind(data_input[, exclude_vars], data_imputed_pooled)
# create mice output
data_imputed_output <- list()
for (i in 1:data_imputed$m){
data_imputed_output[[i]] <- complete(data_imputed, i)
data_imputed_output[[i]] <- cbind(data_input[, exclude_vars], data_imputed_output[[i]])
}
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
source("R/04_original_data_edit.R")
source("R/05_build_mids_object.R")
View(data_imputed_output)
View(data_imputed_pooled)
View(original_data)
original_data$SCON_scaled <- scale(original_data$SCON)[,1]
?scale
# create single imputed dataset
data_imputed_pooled <- merge_imputations(data_impute_input,
data_imputed,
ori = data_impute_input)
data_imputed_pooled <- cbind(data_input[, exclude_vars], data_imputed_pooled)
# create mice output
data_imputed_output <- list()
for (i in 1:data_imputed$m){
data_imputed_output[[i]] <- complete(data_imputed, i)
data_imputed_output[[i]] <- cbind(data_input[, exclude_vars], data_imputed_output[[i]])
}
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
source("R/04_original_data_edit.R")
source("R/05_build_mids_object.R")
View(original_data)
sd_model_02 <- lme4::glmer(WFI ~ Group*time*I(SCON_scaled^2) + Group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all,
family = Gamma(link = "log"),
control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
sd_model_02 <- lme4::glmer(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all,
family = Gamma(link = "log"),
control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
summary(sd_model_02)
model_02_pool <- with(mids_object,
glmer(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled +
stress + age_cat + sex + (1 | id),
family = Gamma(link = "log"),
control = glmerControl(optimizer = "nloptwrap",
calc.derivs = FALSE)))
model_02_summary <- summary(pool(model_02_pool))
model_02_summary
test <- summary(pool_mi(model_02_pool))
test <- pool_mi(model_02_pool)
test <- pool_mi(model_02_pool$analyses)
?pool_mi
test <- mitools::MIextract(model_02_pool, fun = coef)
test <- mitools::MIextract(model_02_pool$analyses, fun = coef)
blah <- summary(model_02_pool$analyses[[1]])
blah$coefficients
blah$coefficients[, "Std. Error"]
test3 <- mitools::MIextract(model_02_pool$analyses, fun = vcov)
test <- mitools::MIextract(model_02_pool$analyses, fun = coef)
test2 <- lapply( mod, FUN=function(mm){
smm <- summary(mm)
smm$coefficients[,"Std. Error"]
} )
test2 <- lapply(model_02_pool$analyses, FUN=function(mm){
smm <- summary(mm)
smm$coefficients[,"Std. Error"]
} )
test3 <- mitools::MIextract(model_02_pool$analyses, fun = vcov)
test4 <- miceadds::pool_mi(qhat = test, u= test3)
test4 <- miceadds::pool_mi(qhat = test, u= test2)
test <- mitools::MIextract(model_02_pool$analyses, fun = coef)
test2 <- lapply(model_02_pool$analyses, FUN=function(mm){
smm <- summary(mm)
smm$coefficients[,"Std. Error"]
} )
test3 <- mitools::MIextract(model_02_pool$analyses, fun = vcov)
test4 <- miceadds::pool_mi(qhat = test, u= test2)
test5 <- mitools::MIcombine(results = test, variances = test3)
test4 <- miceadds::pool_mi(qhat = test, u = test3)
test4 <- miceadds::pool_mi(qhat = test, se = test2)
test
test2
test3
test3 <- mitools::MIextract(model_02_pool$analyses, fun = vcov)
test4 <- miceadds::pool_mi(qhat = test, u = test3)
blah <- summary(model_02_pool$analyses[[1]])
blah$coefficients[, "Std. Error"]
blah <- summary(model_02_pool$analyses[[1]])
blah
blah$coefficients[, "Std. Error"]
blah2 <- blah$coefficients[, "Std. Error"]
diag(blah2)
diag(blah)
test2 <- lapply(model_02_pool$analyses, FUN=function(mm){
smm <- summary(mm)
smm2 <- smm$coefficients[,"Std. Error"]
diag(smm2)
} )
blah$vcov
diag(blah$vcov)
test3 <- mitools::MIextract(model_02_pool$analyses, fun = vcov)
test3
test3 <- lapply(model_02_pool$analyses, function(mm) {
smm <- summary(mm)
diag(smm$vcov)
})
test4 <- miceadds::pool_mi(qhat = test, u = test3)
test3
test4 <- miceadds::pool_mi(qhat = test, u = test3)
data_imputed_pooled_all$WFI_log <- log(data_imputed_pooled_all$WFI + 1)
hist(data_imputed_pooled_all$WFI_log)
model_poly_interaction <- lmer(WFI_log ~ group*time*I(SCON^2) + group*time*SCON + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
model_trans <- lmer(WFI_log ~ group*time*I(SCON^2) + group*time*SCON + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
summary(model_trans)
model_trans <- lmer(WFI_log ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
summary(model_trans)
# linear-model
model_linear <- lmer(WFI_log ~ group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
# non-linear-model
model_non_linear <- glmer(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
# non-linear-model
model_non_linear <- lmer(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
# Compare models using ANOVA
anova(model_linear, model_non_linear)
# non-linear-model
model_non_linear <- lmer(WFI_log ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
# Compare models using ANOVA
anova(model_linear, model_non_linear)
# create single imputed dataset
data_imputed_pooled <- merge_imputations(data_impute_input,
data_imputed,
ori = data_impute_input)
data_imputed_pooled <- cbind(data_input[, exclude_vars], data_imputed_pooled)
# create mice output
data_imputed_output <- list()
for (i in 1:data_imputed$m){
data_imputed_output[[i]] <- complete(data_imputed, i)
data_imputed_output[[i]] <- cbind(data_input[, exclude_vars], data_imputed_output[[i]])
}
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
model_01 <- SCON ~ group*time + stress + age_cat + sex + (1 | id)
model_02 <- WFI_log ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id)
mice_models_01 <- list()
mice_models_02 <- list()
mice_models_summary_01 <- list()
mice_models_summary_02 <- list()
M <- length(data_imputed_output)
for (mm in 1:M){
mice_models_01[[mm]] <- lme4::lmer(model_01,
data = data_imputed_output[[mm]])
mice_models_summary_01[[mm]] <- summary(mice_models_01[[mm]])$coefficients[2]
mice_models_02[[mm]] <- lme4::lmer(model_02,
data = data_imputed_output[[mm]])
mice_models_summary_02[[mm]] <- summary(mice_models_02[[mm]])$coefficients[2]
}
mice_pooled_model_01 <- lmer_pool(mice_models_01, level = .95)
mice_pooled_model_02 <- lmer_pool(mice_models_02, level = .95)
mice_pooled_output_model_01 <- summary(mice_pooled_model_01)
mice_pooled_output_model_02 <- summary(mice_pooled_model_02)
sd_model_01 <- lme4::lmer(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
summary(sd_model_01)
sd_model_02 <- lme4::lmer(WFI_log ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
data = data_imputed_pooled_all)
summary(sd_model_02)
pooled_variance <- summary(mice_pooled_output_model_01)$variance
pooled_variance <- summary(mice_pooled_model_02)$variance
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
cmdstanr::install_cmdstan()
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(cmdstanr)
cmdstan_path()
getwd()
check_cmdstan_toolchain()
install_cmdstan(cores = 2)
cmdstan_version()
set_cmdstan_path("C:/Users/vanandkuma/.cmdstan/cmdstan-2.36.0")
cmdstan_version()
set_cmdstan_path("C:\\Users\vanandkuma\\.cmdstan\\cmdstan-2.36.0")
cmdstanr::install_cmdstan()
set_cmdstan_path("C:/Users/vanandkuma/.cmdstan/cmdstan-2.36.0/cmdstan-2.36.0")
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
source("R/00_load_packages.R")
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
cmdstanr::cmdstan_path()
cmdstan_version()
source("R/00_load_packages.R")
set_cmdstan_path("C:/Users/vanandkuma/.cmdstan/cmdstan-2.36.0/cmdstan-2.36.0")
cmdstan_path()
cmdstan_version()
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
Sys.setenv(CMDSTAN="C:/Users/vanandkuma/.cmdstan/cmdstan-2.36.0/cmdstan-2.36.0")
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "rstan",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_01
model_brm_02 <- brm(WFI_log ~ group*time*I(SCON^2) + group*time*SCON + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "rstan",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_02
saveRDS(model_brm_01, file = "output/model_brm_01_2025_03_13.rds")
saveRDS(model_brm_02, file = "output/model_brm_02_2025_03_13.rds")
install.packages("emmeans")
library(emmeans)
# Compute slopes of SCON within each Group and Time
em_results <- emtrends(model_brm_02, ~ group * time, var = "SCON")
# Print results
print(em_results)
pairs(em_results)
# Compute slopes of SCON within each Group and Time
em_results <- emtrends(model_brm_02, ~ group, var = "SCON*time")
install.packages("ggeffects")
library(ggeffects)
# Generate predicted values for SCON across Group and Time
plot_data <- ggpredict(model_brm_02, terms = c("SCON [all]", "group", "time"))
# Plot predicted effects
ggplot(plot_data, aes(x = x, y = predicted, color = group, linetype = time)) +
geom_line(size = 1.2) +  # Make line thicker for visibility
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2) +  # Add shaded credible intervals
theme_minimal() +
labs(
title = "Effect of Self-Control on WFI_log Over Time",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Group",
linetype = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#d95f02"))  # Custom colors for groups
# Generate predicted values for SCON across Group and Time
plot_data <- ggpredict(model_brm_02, terms = c("SCON [all]", "group", "time"), interval = prediction)
ggplot(plot_data, aes(x = x, y = predicted, color = time)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = time), alpha = 0.2) +
facet_wrap(~ group) +  # Separate plots for each group
theme_minimal() +
labs(
title = "Effect of SCON on WFI_log in Control vs. Intervention Groups",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Time Period",
fill = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#7570b3"))  # Custom colors
View(plot_data)
ggplot(plot_data, aes(x = x, y = predicted, color = facet)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = facet), alpha = 0.2) +
facet_wrap(~ group) +  # Separate plots for each group
theme_minimal() +
labs(
title = "Effect of SCON on WFI_log in Control vs. Intervention Groups",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Time Period",
fill = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#7570b3"))  # Custom colors
# Generate predicted values for SCON across Group and Time
plot_data <- ggpredict(model_brm_02, terms = c("SCON [all]", "group", "time"))
plot_data$predicted <- exp(plot_data$predicted) - 1
plot_data$conf.low <- exp(plot_data$conf.low) - 1
plot_data$conf.high <- exp(plot_data$conf.high) - 1
ggplot(plot_data, aes(x = x, y = predicted, color = facet)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = facet), alpha = 0.2) +
facet_wrap(~ group) +  # Separate plots for each group
theme_minimal() +
labs(
title = "Effect of SCON on WFI_log in Control vs. Intervention Groups",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Time Period",
fill = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#7570b3"))  # Custom colors
plot(conditional_effects(model_brm_02, effects = "SCON:group:time"), points = TRUE)
plot(conditional_effects(model_brm_02, conditions = "SCON:group:time"), points = TRUE)
data_imputed_pooled_all$SCON_group <- ifelse(data_imputed_pooled_all$SCON %in% c(1,2,3,4), "Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5,6,7,8), "Medium", "High"))
summary(data_imputed_pooled_all$SCON_group)
table(data_imputed_pooled_all$SCON_group)
data_imputed_pooled_all$SCON_group <-
ifelse(data_imputed_pooled_all$SCON %in% c(1,2,3,4), "Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5,6,7,8), "Medium",
"High"))
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = time, y = WFI, color = factor(group))) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
facet_wrap(~ SCON_group) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = time, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
facet_wrap(group ~ SCON_group) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = time, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ SCON_group) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
data_imputed_pooled_all$SCON_group <-
ifelse(data_imputed_pooled_all$SCON %in% c(1,2,3,4), "Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5,6,7,8), "Medium",
"High"))
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time, labeller = labeller(group = group_labels, time = time_labels)) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
time_labels <- c("Baseline", "Follow-up")
names(time_labels) <- c("baseline", "follow-up")
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time, labeller = labeller(group = group_labels, time = time_labels)) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
group_labels <- c("Control", "Intervention")
names(group_labels) <- c(0, 1)
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI, color = factor(time))) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE, size = 3) +
facet_wrap(~ group, labeller = labeller(group = group_labels)) +
labs(
title = "Non-Linear Relationship Between Self-Control and WFI",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)",
color = "Time"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
