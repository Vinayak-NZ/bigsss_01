chains = 2,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
Sys.setenv(CMDSTAN="C:/Users/vanandkuma/.cmdstan/cmdstan-2.36.0/cmdstan-2.36.0")
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "cmdstanr",
sample_prior = "no",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "rstan",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_01
model_brm_02 <- brm(WFI_log ~ group*time*I(SCON^2) + group*time*SCON + stress + age_cat + sex + (1 | id),
data = data_imputed_long,
chains = 2,
cores = 4,
iter = 1000,
warmup = 500,
backend = "rstan",
control = list(adapt_delta = 0.8, max_treedepth = 10))
model_brm_02
saveRDS(model_brm_01, file = "output/model_brm_01_2025_03_13.rds")
saveRDS(model_brm_02, file = "output/model_brm_02_2025_03_13.rds")
install.packages("emmeans")
library(emmeans)
# Compute slopes of SCON within each Group and Time
em_results <- emtrends(model_brm_02, ~ group * time, var = "SCON")
# Print results
print(em_results)
pairs(em_results)
# Compute slopes of SCON within each Group and Time
em_results <- emtrends(model_brm_02, ~ group, var = "SCON*time")
install.packages("ggeffects")
library(ggeffects)
# Generate predicted values for SCON across Group and Time
plot_data <- ggpredict(model_brm_02, terms = c("SCON [all]", "group", "time"))
# Plot predicted effects
ggplot(plot_data, aes(x = x, y = predicted, color = group, linetype = time)) +
geom_line(size = 1.2) +  # Make line thicker for visibility
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2) +  # Add shaded credible intervals
theme_minimal() +
labs(
title = "Effect of Self-Control on WFI_log Over Time",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Group",
linetype = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#d95f02"))  # Custom colors for groups
# Generate predicted values for SCON across Group and Time
plot_data <- ggpredict(model_brm_02, terms = c("SCON [all]", "group", "time"), interval = prediction)
ggplot(plot_data, aes(x = x, y = predicted, color = time)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = time), alpha = 0.2) +
facet_wrap(~ group) +  # Separate plots for each group
theme_minimal() +
labs(
title = "Effect of SCON on WFI_log in Control vs. Intervention Groups",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Time Period",
fill = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#7570b3"))  # Custom colors
View(plot_data)
ggplot(plot_data, aes(x = x, y = predicted, color = facet)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = facet), alpha = 0.2) +
facet_wrap(~ group) +  # Separate plots for each group
theme_minimal() +
labs(
title = "Effect of SCON on WFI_log in Control vs. Intervention Groups",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Time Period",
fill = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#7570b3"))  # Custom colors
# Generate predicted values for SCON across Group and Time
plot_data <- ggpredict(model_brm_02, terms = c("SCON [all]", "group", "time"))
plot_data$predicted <- exp(plot_data$predicted) - 1
plot_data$conf.low <- exp(plot_data$conf.low) - 1
plot_data$conf.high <- exp(plot_data$conf.high) - 1
ggplot(plot_data, aes(x = x, y = predicted, color = facet)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = facet), alpha = 0.2) +
facet_wrap(~ group) +  # Separate plots for each group
theme_minimal() +
labs(
title = "Effect of SCON on WFI_log in Control vs. Intervention Groups",
x = "Self-Control (SCON)",
y = "Predicted WFI_log",
color = "Time Period",
fill = "Time Period"
) +
scale_color_manual(values = c("#1b9e77", "#7570b3"))  # Custom colors
plot(conditional_effects(model_brm_02, effects = "SCON:group:time"), points = TRUE)
plot(conditional_effects(model_brm_02, conditions = "SCON:group:time"), points = TRUE)
data_imputed_pooled_all$SCON_group <- ifelse(data_imputed_pooled_all$SCON %in% c(1,2,3,4), "Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5,6,7,8), "Medium", "High"))
summary(data_imputed_pooled_all$SCON_group)
table(data_imputed_pooled_all$SCON_group)
data_imputed_pooled_all$SCON_group <-
ifelse(data_imputed_pooled_all$SCON %in% c(1,2,3,4), "Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5,6,7,8), "Medium",
"High"))
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = time, y = WFI, color = factor(group))) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
facet_wrap(~ SCON_group) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = time, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
facet_wrap(group ~ SCON_group) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = time, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ SCON_group) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
data_imputed_pooled_all$SCON_group <-
ifelse(data_imputed_pooled_all$SCON %in% c(1,2,3,4), "Low",
ifelse(data_imputed_pooled_all$SCON %in% c(5,6,7,8), "Medium",
"High"))
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time, labeller = labeller(group = group_labels, time = time_labels)) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
time_labels <- c("Baseline", "Follow-up")
names(time_labels) <- c("baseline", "follow-up")
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.3, size = 4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
scale_color_manual(values = colour_vals) +
facet_grid(group ~ time, labeller = labeller(group = group_labels, time = time_labels)) +
labs(
title = "Relationship Between Self-Control and WFI",
x = "Time",
y = "Work-Family Interference (WFI)",
color = "Group"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
labs(title = "WFI vs. SCON: Checking Linearity",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)") +
ylab("Work family interference") +
xlab("Self-control") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
group_labels <- c("Control", "Intervention")
names(group_labels) <- c(0, 1)
colour_vals <- c("#FFA500", "#00008B")
ggplot(data_imputed_pooled_all, aes(x = SCON, y = WFI, color = factor(time))) +
geom_point(alpha = 0.3, size = 4) +
scale_color_manual(values = colour_vals) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE, size = 3) +
facet_wrap(~ group, labeller = labeller(group = group_labels)) +
labs(
title = "Non-Linear Relationship Between Self-Control and WFI",
x = "Self-Control (SCON)",
y = "Work-Family Interference (WFI)",
color = "Time"
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
source("R/00_load_packages.R")
source("R/00_set_date.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
data_imputed_long <- do.call(rbind, data_imputed_output)
model_brm_01 <- brm(SCON ~ group*time + stress + age_cat + sex + (1 | id),
family = gaussian(link = "log"),
data = data_imputed_long,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10))
summary(model_brm_01)
saveRDS(model_brm_01, file = paste0("output/model_brm_01_", date.today, ".rds"))
sink(paste0("output/model_brm_01_", date.today, ".rds"))
print(summary(model_brm_01))
sink()
max_cores <- max(1, parallel::detectCores() - 2)
print(max_cores)
saveRDS(model_brm_01, file = paste0("output/model_brm_01_", date.today, ".rds"))
sink(paste0("output/model_brm_01_", date.today, ".txt"))
print(summary(model_brm_01))
sink()
model_brm_02 <- brm(WFI ~ group*time*I(SCON_scaled^2) + group*time*SCON_scaled + stress + age_cat + sex + (1 | id),
family = Gamma(link = "log"),
data = data_imputed_long,
chains = 4,
cores = 4,
iter = 4000,
warmup = 500,
backend = "cmdstanr",
control = list(adapt_delta = 0.8, max_treedepth = 10))
summary(model_brm_02)
saveRDS(model_brm_02, file = paste0("output/model_brm_02_", date.today, ".rds"))
sink(paste0("output/model_brm_02_", date.today, ".txt"))
print(summary(model_brm_02))
sink()
# model-02-WFI
em_results <-
emtrends(model_brm_02, ~ group * time, var = "SCON")
library(emmeans)
# model-02-WFI
em_results <-
emtrends(model_brm_02, ~ group * time, var = "SCON")
# model-02-WFI
em_results <-
emtrends(model_brm_02, ~ group * time, var = "SCON_scaled")
print(em_results)
pairs(em_results)
library(tidybayes)
install.packages("tidybayes")
library(tidybayes)
# Generate predicted values with uncertainty
pred_data <- data_imputed_long %>%
data_grid(group, time, SCON_scaled = seq(min(SCON_scaled), max(SCON_scaled), length.out = 100)) %>%
add_epred_draws(model_brm_02)
# Generate predicted values with uncertainty
new_data <- expand_grid(
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 100)
)
install.packages("tidyr")
library(tidyr)
# Generate predicted values with uncertainty
new_data <- expand_grid(
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 100)
)
pred_data <- new_data %>%
add_epred_draws(model_brm_02)
# Generate estimated marginal means (predicted WFI)
em_results <- emmeans(model_brm_02,
~ SCON_scaled | group * time,
at = list(SCON_scaled = seq(min(data$SCON_scaled),
max(data$SCON_scaled),
length.out = 100)))
# Generate estimated marginal means (predicted WFI)
em_results <- emmeans(model_brm_02, ~ SCON_scaled | group * time,
at = list(SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled),
length.out = 100)))
# Generate estimated marginal means (predicted WFI)
em_results <- emmeans(model_brm_02, ~ SCON_scaled | group * time,
at = list(SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled),
length.out = 50)))
library(modelr)
hist(data_impute_long$SCON_scaled)
hist(data_imputed_long$SCON_scaled)
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled, n = 101),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
?seq_range
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled, n = 50),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled, n = 10),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
# Generate estimated marginal means (predicted WFI)
# Extract unique imputation identifiers from MICE dataset
imputation_ids <- unique(data_imputed_long$.imp)  # MICE stores imputations in `.imp`
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
library(tidyverse)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(pred_grid)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
pred_grid <- pred_grid[, c(".imp", "group", "time")]
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(data_imputed_long)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time", "SCON_scaled")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(pred_grid)
pred_data <- data_imputed_long %>%
add_predicted_draws(model_brm_02)
View(pred_grid)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c("id", ".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c("id", ".imp", "group", "time"))
View(pred_data)
View(pred_data)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
View(pred_grid)
pred_grid <- pred_grid[, c("id", ".imp", "group", "time", "sex", "age_cat")]
data_imputed_long_sub <- data_imputed_long[, c("id", ".imp", "group", "time", "sex", "age_cat")]
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long_sub, by = c("id", ".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
data_imputed_long_sub <- data_imputed_long[, c("id", ".imp", "group", "time", "sex", "stress","age_cat")]
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long_sub, by = c("id", ".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(pred_data)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
View(pred_data)
View(pred_grid)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
?expand_grid
test <- add_predicted_draws(model_brm_02, data_imputed_long)
test <- add_predicted_draws(data_imputed_long, model_brm_02)
