time = unique(data_imputed_long$time),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 100)
)
install.packages("tidyr")
library(tidyr)
# Generate predicted values with uncertainty
new_data <- expand_grid(
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 100)
)
pred_data <- new_data %>%
add_epred_draws(model_brm_02)
# Generate estimated marginal means (predicted WFI)
em_results <- emmeans(model_brm_02,
~ SCON_scaled | group * time,
at = list(SCON_scaled = seq(min(data$SCON_scaled),
max(data$SCON_scaled),
length.out = 100)))
# Generate estimated marginal means (predicted WFI)
em_results <- emmeans(model_brm_02, ~ SCON_scaled | group * time,
at = list(SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled),
length.out = 100)))
# Generate estimated marginal means (predicted WFI)
em_results <- emmeans(model_brm_02, ~ SCON_scaled | group * time,
at = list(SCON_scaled = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled),
length.out = 50)))
library(modelr)
hist(data_impute_long$SCON_scaled)
hist(data_imputed_long$SCON_scaled)
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled, n = 101),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
?seq_range
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled, n = 50),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
# Generate estimated marginal means (predicted WFI)
pred_data <- data_imputed_long %>%
expand_grid(SCON_scaled = seq_range(SCON_scaled, n = 10),  # Generates 101 evenly spaced points
group, time) %>%  # Keeps predictions separate for each group and timepoint
add_predicted_draws(model_brm_02)  # Adds posterior predictions
# Generate estimated marginal means (predicted WFI)
# Extract unique imputation identifiers from MICE dataset
imputation_ids <- unique(data_imputed_long$.imp)  # MICE stores imputations in `.imp`
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
library(tidyverse)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(pred_grid)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
pred_grid <- pred_grid[, c(".imp", "group", "time")]
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(data_imputed_long)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c(".imp", "group", "time", "SCON_scaled")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(pred_grid)
pred_data <- data_imputed_long %>%
add_predicted_draws(model_brm_02)
View(pred_grid)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c("id", ".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long, by = c("id", ".imp", "group", "time"))
View(pred_data)
View(pred_data)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
View(pred_grid)
pred_grid <- pred_grid[, c("id", ".imp", "group", "time", "sex", "age_cat")]
data_imputed_long_sub <- data_imputed_long[, c("id", ".imp", "group", "time", "sex", "age_cat")]
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long_sub, by = c("id", ".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
data_imputed_long_sub <- data_imputed_long[, c("id", ".imp", "group", "time", "sex", "stress","age_cat")]
# Generate predictions for each imputation
pred_data <- pred_grid %>%
left_join(data_imputed_long_sub, by = c("id", ".imp", "group", "time")) %>%  # Match imputation IDs
add_predicted_draws(model_brm_02)
View(pred_data)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
View(pred_data)
View(pred_grid)
# Create a smaller prediction grid for each imputation
pred_grid <- expand_grid(
SCON_scaled = seq(min(data_imputed_long$SCON_scaled, na.rm = TRUE),
max(data_imputed_long$SCON_scaled, na.rm = TRUE),
length.out = 10),  # Reduce to 10 points
id = unique(data_imputed_long$id),
group = unique(data_imputed_long$group),
time = unique(data_imputed_long$time),
.imp = imputation_ids  # Keep imputation identifier
)
?expand_grid
test <- add_predicted_draws(model_brm_02, data_imputed_long)
test <- add_predicted_draws(data_imputed_long, model_brm_02)
source("R/00_load_packages.R")
source("R/00_set_date.R")
source("R/01_load_data.R")
source("R/02_edit_data.R")
source("R/03_impute_data.R")
source("R/04_post_impute_edits.R")
source("R/04_post_impute_single.R")
model_01_brm <- readRDS("output/model_brm_01_2025-03-17.rds")
model_02_brm <- readRDS("output/model_brm_02_2025-03-17.rds")
data_imputed_long <- do.call(rbind, data_imputed_output)
# Define values of SCON to compare
SCON_levels <-
list(SCON = seq(min(data_imputed_long$SCON), max(data_imputed_long$SCON), length.out = 5))
# Get marginal means for WFI at different SCON levels across group*time
em_results_quad <- emmeans(model_brm_02, ~ group * time * SCON, at = SCON_levels)
# Get marginal means for WFI at different SCON levels across group*time
em_results_quad <- emmeans(model_01_brm, ~ group * time * SCON, at = SCON_levels)
# Define values of SCON to compare
SCON_levels <-
list(SCON = seq(min(data_imputed_long$SCON_scaled), max(data_imputed_long$SCON_scaled), length.out = 5))
# Get marginal means for WFI at different SCON levels across group*time
em_results_quad <- emmeans(model_01_brm, ~ group * time * SCON_scaled, at = SCON_levels)
View(SCON_levels)
View(model_01_brm)
# Estimate marginal means for different levels of SCON
SCON_levels <- list(SCON = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 5))
# Compute estimated marginal means across group*time for different levels of SCON
em_results_quad <- emmeans(model_brm_02, ~ group * time * SCON, at = SCON_levels)
# Estimate marginal means for different levels of SCON
SCON_levels <- list(SCON = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 5))
# Compute estimated marginal means across group*time for different levels of SCON
em_results_quad <- emmeans(model_01_brm, ~ group * time * SCON, at = SCON_levels)
# Estimate marginal means for different levels of SCON
SCON_levels <- list(SCON = seq(min(data_imputed_long$SCON_scaled),
max(data_imputed_long$SCON_scaled), length.out = 5))
# Compute estimated marginal means across group*time for different levels of SCON
em_results_quad <- emmeans(model_02_brm, ~ group * time * SCON_scaled, at = SCON_levels)
# Print results
print(em_results_quad)
# Compare pairwise differences
pairs(em_results_quad)
?emmeans
# Compute conditional effects
plot_data <-
conditional_effects(model_02_brm, effects = "SCON_scaled:group:time", method = "posterior_epred")
?conditional_effects
# Compute conditional effects
plot_data <-
conditional_effects(model_02_brm, effects = "group:time", method = "posterior_epred")
# Plot
plot(plot_data, plot = TRUE)
View(plot_data)
# Example: Define a grid over 'group', 'time', and 'SCON_scaled'
predictor_grid <- expand.grid(
group = c(0, 1),  # Control and intervention groups
time = c('baseline', 'follow-up'),
SCON_scaled = seq(-2, 2, length.out = 5)  # Range of SCON_scaled values
)
posterior_predictions <- posterior_epred(model_02_brm,
newdata = predictor_grid,
re_formula = NA)
# Example: Define a grid over 'group', 'time', and 'SCON_scaled'
# Get mean values for continuous variables & most frequent category for categorical variables
mean_stress <- mean(data_imputed_long$stress, na.rm = TRUE)
most_common_age <- names(sort(table(data_imputed_long$age_cat), decreasing = TRUE))[1]
# Example: Define a grid over 'group', 'time', and 'SCON_scaled'
# Get mean values for continuous variables & most frequent category for categorical variables
most_common_stress <- names(sort(table(data_imputed_long$stress), decreasing = TRUE))[1]
most_common_age <- names(sort(table(data_imputed_long$age_cat), decreasing = TRUE))[1]
most_common_sex <- names(sort(table(data_imputed_long$sex), decreasing = TRUE))[1]
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(-2, 2, length.out = 5),
stress = mean_stress,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <- posterior_epred(model_02_brm,
newdata = predictor_grid,
re_formula = NA)
library(dplyr)
# Compute summary statistics
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
View(data_imputed_long)
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(-4, 2, length.out = 5),
stress = mean_stress,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <- posterior_epred(model_02_brm,
newdata = predictor_grid,
re_formula = NA)
# Compute summary statistics
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(-4, 2, length.out = 3),
stress = mean_stress,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <- posterior_epred(model_02_brm,
newdata = predictor_grid,
re_formula = NA)
# Compute summary statistics
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
# Compute IQR for WFI
Q1 <- quantile(data_imputed_pooled_all$WFI, 0.25, na.rm = TRUE)
Q3 <- quantile(data_imputed_pooled_all$WFI, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
# Define lower and upper outlier thresholds
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
# Identify outliers
outliers <- data_imputed_pooled_all %>%
filter(WFI < lower_bound | WFI > upper_bound)
# View potential outliers
print(outliers)
emmeans_summary$SCON_group <- as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")))
View(emmeans_summary)
table(data_imputed_long$stress
)
sort(table(data_imputed_long$stress)
)
most_common_stress
# Example: Define a grid over 'group', 'time', and 'SCON_scaled'
# Get mean values for continuous variables & most frequent category for categorical variables
most_common_stress <- names(sort(table(data_imputed_long$stress), decreasing = TRUE))[1]
most_common_age <- names(sort(table(data_imputed_long$age_cat), decreasing = TRUE))[1]
most_common_sex <- names(sort(table(data_imputed_long$sex), decreasing = TRUE))[1]
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(-4, 2, length.out = 3),
stress = most_common_stress,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <- posterior_epred(model_02_brm,
newdata = predictor_grid,
re_formula = NA)
# Compute summary statistics
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
emmeans_summary$SCON_group <- as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")))
emmeans_summary
emmeans_summary <- emmeans_summary[, c("group", "time", "SCON_group", "predicted mean",
"lower_CI", "upper_CI")]
emmeans_summary <- emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
emmeans_summary
ggplot(emmeans_summary, aes(x = time, y = predicted_mean, color = factor(group))) +
geom_point(position = position_dodge(0.5), size = 3) +  # Points for predicted means
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +  # CIs as error bars
facet_wrap(~ SCON_group) +  # Separate panels for baseline and follow-up
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Time",
y = "Predicted WFI",
color = "Group") +
scale_color_manual(values = c("red", "blue"), labels = c("Control", "Intervention")) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
ggplot(emmeans_summary, aes(x = group, y = predicted_mean, color = factor(time))) +
geom_point(position = position_dodge(0.5), size = 3) +  # Points for predicted means
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +  # CIs as error bars
facet_wrap(~ SCON_group) +  # Separate panels for baseline and follow-up
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Group",
y = "Predicted WFI",
color = "Time") +
scale_color_manual(values = c("red", "blue"), labels = c("Control", "Intervention")) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
?as.factor
# Compute summary statistics
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
emmeans_summary$SCON_group <- as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")),
levels = c("Low", "Moderate", "High"))
emmeans_summary
emmeans_summary$SCON_group <- as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")))
emmeans_summary$SCON_group <- factor(emmeans_summary$SCON_group,
levels = c("Low", "Medium", "High"))
emmeans_summary$group <- as.factor(ifelse(emmeans_summary$group == 0, "Control",
"Intervention"))
emmeans_summary <- emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
ggplot(emmeans_summary, aes(x = group, y = predicted_mean, color = factor(time))) +
geom_point(position = position_dodge(0.5), size = 3) +  # Points for predicted means
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +  # CIs as error bars
facet_wrap(~ SCON_group) +  # Separate panels for baseline and follow-up
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Group",
y = "Predicted WFI",
color = "Time") +
scale_color_manual(values = c("red", "blue"), labels = c("Baseline", "Follow-up")) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# Compute summary statistics
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
emmeans_summary$SCON_group <- as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")))
emmeans_summary$SCON_group <- factor(emmeans_summary$SCON_group,
levels = c("Low", "Moderate", "High"))
emmeans_summary$group <- as.factor(ifelse(emmeans_summary$group == 0, "Control",
"Intervention"))
emmeans_summary <- emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
ggplot(emmeans_summary, aes(x = group, y = predicted_mean, color = factor(time))) +
geom_point(position = position_dodge(0.5), size = 3) +  # Points for predicted means
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +  # CIs as error bars
facet_wrap(~ SCON_group) +  # Separate panels for baseline and follow-up
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Group",
y = "Predicted WFI",
color = "Time") +
scale_color_manual(values = c("red", "blue"), labels = c("Baseline", "Follow-up")) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
ggplot(emmeans_summary, aes(x = group, y = predicted_mean, color = factor(time))) +
geom_point(position = position_dodge(0.5), size = 3) +  # Points for predicted means
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +  # CIs as error bars
facet_wrap(~ SCON_group) +  # Separate panels for baseline and follow-up
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Intervention Exposure",
y = "Predicted Work-Family Interference (WFI)",
color = "Time") +
scale_color_manual(values = c("red", "blue"), labels = c("Baseline", "Follow-up")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
posterior_predictions
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary
# create data frame of predictions (control for age, sex, stress)
most_common_stress <-
names(sort(table(data_imputed_long$stress), decreasing = TRUE))[1]
most_common_age <-
names(sort(table(data_imputed_long$age_cat), decreasing = TRUE))[1]
most_common_sex <-
names(sort(table(data_imputed_long$sex), decreasing = TRUE))[1]
predictor_grid <- expand.grid(
group = c(0, 1),
time = c('baseline', 'follow-up'),
SCON_scaled = seq(-4, 2, length.out = 3),
stress = most_common_stress,
age_cat = most_common_age,
sex = most_common_sex
)
posterior_predictions <-
posterior_epred(model_02_brm,
newdata = predictor_grid,
re_formula = NA)
emmeans_summary <- predictor_grid %>%
mutate(predicted_mean = colMeans(posterior_predictions),
lower_CI = apply(posterior_predictions, 2, quantile, probs = 0.025),
upper_CI = apply(posterior_predictions, 2, quantile, probs = 0.975))
emmeans_summary$SCON_group <-
as.factor(ifelse(emmeans_summary$SCON_scaled == -4, "Low",
ifelse(emmeans_summary$SCON_scaled == -1,
"Moderate", "High")))
emmeans_summary$SCON_group <-
factor(emmeans_summary$SCON_group,
levels = c("Low", "Moderate", "High"))
emmeans_summary$group <-
as.factor(ifelse(emmeans_summary$group == 0, "Control", "Intervention"))
emmeans_summary <-
emmeans_summary[, c("group", "time", "SCON_group", "predicted_mean",
"lower_CI", "upper_CI")]
# plot conditional effects
ggplot(emmeans_summary, aes(x = group, y = predicted_mean, color = factor(time))) +
geom_point(position = position_dodge(0.5), size = 3) +
geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
width = 0.2, position = position_dodge(0.5)) +
facet_wrap(~ SCON_group) +
labs(title = "Predicted WFI by Self-Control, Group, and Time",
x = "Intervention Exposure",
y = "Predicted Work-Family Interference (WFI)",
color = "Time") +
scale_color_manual(values = c("red", "blue"), labels = c("Baseline", "Follow-up")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.position = "none")
